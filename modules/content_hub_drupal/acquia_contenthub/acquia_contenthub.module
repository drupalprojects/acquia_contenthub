<?php
/**
 * @file
 * Contains acquia_contenthub.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_help().
 */
function acquia_contenthub_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.acquia_contenthub':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Some info about Acquia Content Hub') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_insert().
 */
function acquia_contenthub_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\acquia_contenthub\EntityManager $entity_manager */
  $entity_manager = \Drupal::service('acquia_contenthub.entity_manager');
  $entity_manager->entityAction($entity, 'INSERT');
}

/**
 * Implements hook_entity_update().
 */
function acquia_contenthub_entity_update(EntityInterface $entity) {
  /** @var \Drupal\acquia_contenthub\EntityManager $entity_manager */
  $entity_manager = \Drupal::service('acquia_contenthub.entity_manager');
  $entity_manager->entityAction($entity, 'UPDATE');

  // Re-import entity, if the entity is "pending sync".
  // TODO: This should go into a service.
  $imported_entity = \Drupal::service('acquia_contenthub.acquia_contenthub_entities_tracking')->loadByDrupalEntity($entity->getEntityTypeId(), $entity->id());
  if (!$imported_entity) {
    return;
  }

  if ($imported_entity->isPendingSync() && !isset($entity->__contenthub_synchronized)) {
    $contenthub_import_controller = \Drupal::service('acquia_contenthub.acquia_contenthub_cdf.import_entity');
    $contenthub_import_controller->saveDrupalEntity($imported_entity->getUuid(), $entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function acquia_contenthub_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\acquia_contenthub\EntityManager $entity_manager */
  $entity_manager = \Drupal::service('acquia_contenthub.entity_manager');
  $entity_manager->entityAction($entity, 'DELETE');
}

/**
 * Sends entities to Content Hub using Bulk Upload.
 */
function acquia_contenthub_send_entities() {
  /** @var \Drupal\acquia_contenthub\EntityManager $entity_manager */
  $entity_manager = \Drupal::service('acquia_contenthub.entity_manager');

  /** @var \Drupal\acquia_contenthub\Normalizer\ContentEntityCdfNormalizer $acquia_contenthub_normalizer */
  $acquia_contenthub_normalizer = \Drupal::service('acquia_contenthub.normalizer.entity.acquia_contenthub_cdf');

  /** @var \Drupal\acquia_contenthub\Controller\ContentHubEntityExportController $acquia_contenthub_export_controller */
  $acquia_contenthub_export_controller = \Drupal::service('acquia_contenthub.acquia_contenthub_export_entities');

  $entities = $entity_manager->collectExportEntities();

  // Verify that the collected entities are not already included within the
  // the references of other collected entities.
  $uuids = array_keys($entities);
  foreach ($entities as $en) {
    $entity = $en['entity'];
    // Get referenced entities.
    $referenced_entities = $acquia_contenthub_normalizer->getReferencedFields($entity);

    // If entities are included as references then delete them from the
    // collected entities array.
    foreach ($referenced_entities as $key => $ref_entity) {
      if (in_array($ref_entity->uuid(), $uuids)) {
        unset($entities[$ref_entity->uuid()]);
      }
    }
  }

  // The collected entities are clean now and should all be processed.
  $exported_entities = [];
  $bulk_url_array = [];
  foreach ($entities as $en) {
    $entity = $en['entity'];
    $entity_type = $entity->getEntityTypeId();
    $entity_id = $entity->id();
    $bulk_url_array[$entity_type][$entity_id] = $entity_id;
    $exported_entities = array_merge($exported_entities, $acquia_contenthub_export_controller->getEntityCdfByInternalRequest($entity_type, $entity_id));
  }
  // Eliminating duplicates.
  $exported_cdfs = [];
  foreach ($exported_entities['entities'] as $cdf) {
    $exported_cdfs[$cdf['uuid']] = $cdf;
  }

  // Now implode parameters.
  foreach ($bulk_url_array as $entity_type => $entities) {
    $bulk_url_array[$entity_type] = implode(',', $entities);
  }
  $resource_url = $entity_manager->getBulkResourceUrl($bulk_url_array);

  // @TODO This logic should be reviewed later on. We are just saving the
  // exported entities and not using this information to optimize the export
  // yet.
  // Setting up INITIATED status to all tracked exported entities.
  foreach ($exported_cdfs as $exported_entity) {
    // Obtaining the entity ID from the entity.
    $acquia_contenthub_export_controller->trackExportedEntity($exported_entity);
  }
  $entity_manager->updateRemoteEntities($resource_url);

}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function acquia_contenthub_form_node_form_alter(&$form, $form_state) {
  /* @var Drupal\Core\Entity\FieldableEntityInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  // Don't display anything if the node doesn't exist.
  if (empty($node->id())) {
    return;
  }

  $imported_entity = \Drupal::service('acquia_contenthub.acquia_contenthub_entities_tracking')->loadByDrupalEntity($node->getEntityTypeId(), $node->id());
  // If the entity is not imported, do not display form.
  if (!$imported_entity) {
    return;
  }

  $form['acquia_contenthub'] = array(
    '#type' => 'details',
    '#title' => t('Acquia Content Hub settings'),
    '#access' => \Drupal::currentUser()->hasPermission('administer acquia content hub'),
    '#group' => 'advanced',
    '#tree' => TRUE,
    '#weight' => 30,
  );
  $form['acquia_contenthub']['auto_update_label'] = array(
    '#type' => 'markup',
    '#markup' => $imported_entity->hasLocalChange() ? t('This content has been modified.') : t('What do you like to do if there are changes in the original article?'),
  );
  $form['acquia_contenthub']['auto_update'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable automatic updates'),
    '#default_value' => $imported_entity->isAutoUpdate(),
  );
  if ($imported_entity->hasLocalChange()) {
    $form['acquia_contenthub']['auto_update_local_changes_label'] = array(
      '#type' => 'markup',
      '#markup' => '<div>' . t('Check to enable syncing with any future updates of content from Content Hub.') . '</div><div><strong>' . t("Any edits that were made to your site's instance of this content will be overwritten by the Content Hub version.") . '</strong></div>',
    );
  }

  foreach (array_keys($form['actions']) as $action) {
    if ($action !== 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      array_unshift($form['actions'][$action]['#submit'], 'acquia_contenthub_form_node_form_submit');
    }
  }
}

/**
 * Submit handler for the node form with acquia contenthub options.
 *
 * @see acquia_contenthub_form_node_form_alter()
 */
function acquia_contenthub_form_node_form_submit($form, FormStateInterface $form_state) {
  if ($form_state->isValueEmpty('acquia_contenthub')) {
    return;
  }
  $node = $form_state->getFormObject()->getEntity();
  $imported_entity = \Drupal::service('acquia_contenthub.acquia_contenthub_entities_tracking')->loadByDrupalEntity($node->getEntityTypeId(), $node->id());
  if (!$imported_entity) {
    return;
  }
  $values = $form_state->getValue('acquia_contenthub');
  $new_auto_update_flag = $values['auto_update'];

  // If we are changing from state of "has local changes" to "sync enabled", set
  // state to resync the entity. Otherwise, just set the new autoUpdate flag.
  $set_pending_sync = $imported_entity->hasLocalChange() && $new_auto_update_flag === 1;
  $set_pending_sync ? $imported_entity->setPendingSync() : $imported_entity->setAutoUpdate($new_auto_update_flag);
  $imported_entity->save();
}

// Helper function.
/**
 * Returns a vocabulary object which matches the given name.
 *
 * Will return null if no such vocabulary exists.
 *
 * @param string $vocabulary_name
 *   This is the name of the section which is required.
 *
 * @return Object
 *   This is the vocabulary object with the name or null if no such vocabulary
 *   exists.
 */
function acquia_contenthub_get_vocabulary_by_name($vocabulary_name) {
  $vocabs = Vocabulary::loadMultiple(NULL);
  foreach ($vocabs as $vocab_object) {
    /* @var $vocab_object \Drupal\taxonomy\Entity\Vocabulary  */
    if ($vocab_object->getOriginalId() == $vocabulary_name) {
      return $vocab_object;
    }
  }
  return NULL;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function acquia_contenthub_form_node_type_form_alter(array &$form, FormStateInterface &$form_state) {
  $node_type = $form_state->getFormObject()->getEntity()->id();

  /** @var \Drupal\acquia_contenthub\EntityManager $entity_manager */
  $entity_manager = \Drupal::service('acquia_contenthub.entity_manager');
  /** @var \Drupal\acquia_contenthub\Entity\ContentHubEntityTypeConfig $entity_type_config */
  $entity_type_config = $entity_manager->getContentHubEntityTypeConfigurationEntity('node');

  // Only enable selection of preview images for entities that have been
  // previously selected to work with Acquia Content Hub.
  if (!empty($entity_type_config) && $entity_type_config->isEnableIndex($node_type)) {
    $form['acquia_contenthub'] = \Drupal::service('acquia_contenthub.form.node_type_preview_image_form')->getForm($node_type);
    $form['actions']['submit']['#submit'][] = 'acquia_contenthub_form_node_type_form_submit';
  }
}

/**
 * Submit handler for the node type form with acquia contenthub options.
 *
 * @see acquia_contenthub_form_node_type_form_alter()
 */
function acquia_contenthub_form_node_type_form_submit(array $form, FormStateInterface &$form_state) {
  $node_type = $form_state->getFormObject()->getEntity()->id();
  $settings = $form_state->getValue('acquia_contenthub');
  \Drupal::service('acquia_contenthub.form.node_type_preview_image_form')->saveSettings($node_type, $settings);
}
